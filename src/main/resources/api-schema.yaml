openapi: "3.0.0"
info:
  title: TODO API Document
  version: "0.0.1"
  description: TODO APIのドキュメントです
tags:
  - name: task
    description: タスク関連のAPI
paths:
  /tasks:
    get:
      tags:
        - task
      summary: "タスク一覧取得"
      description: "タスク一覧を取得します"
      operationId: findAll
      parameters: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
                example: # サンプルデータ
                  - id: 1
                    title: hoge
                    content: hogehoge
                    finished: false
                  - id: 2
                    title: hoge2
                    content: hogehoge2
                    finished: true
    post:
      summary: "タスク作成"
      description: "タスクを新規作成します"
      operationId: create
      tags:
        - task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskRequest"
      responses:
        201:
          description: "Created"
          headers:
            location:
              description: "作成されたリソースのURI"
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionError"
  /tasks/{taskId}:
    get:
      summary: "タスク取得"
      description: "指定されたIDのタスクを1件取得します"
      tags:
        - task
      operationId: findById
      parameters:
        - name: taskId
          in: path
          required: true
          description: "詳細を取得するタスクのID"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionError"
    put:
      summary: "タスク変更"
      description: "指定されたIDのタスクの内容を変更します"
      tags:
        - task
      operationId: update
      parameters:
        - name: taskId
          in: path
          required: true
          description: "変更するタスクのID"
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskRequest"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
    patch:
      summary: "タスク完了"
      description: "指定されたIDのタスクの完了フラグを変更"
      tags:
        - task
      operationId: finish
      parameters:
        - name: taskId
          in: path
          required: true
          description: "フラグを変更するタスクのID"
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskPatch"
      responses:
        '200':
          description: OK
    delete:
      summary: "タスク削除"
      description: "指定されたIDのタスクを削除します"
      tags:
        - task
      operationId: deleteTask
      parameters:
        - name: taskId
          in: path
          required: true
          description: "削除するタスクのID"
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
components:
  schemas:
    TaskRequest:
      type: object
      properties:
        title:
          type: string
          description: "作成されるタスクのタイトル"
        content:
          type: string
          description: "作成されるタスクの本文"
      required:
        - title
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "タスクID"
        title:
          type: string
          description: "タスクのタイトル"
        content:
          type: string
          description: "タスクの本文"
        finished:
          type: boolean
          description: "タスクの終了判定"
      required:
        - id
        - title
    TaskPatch:
      type: object
      properties:
        finishedFlg:
          type: boolean
          description: "タスクが完了したかの判定"
    ExceptionError:
      description: "指定したリソースが存在しない"
      type: object
      properties:
        status:
          type: string
          description: "エラーステータス"
        error:
          type: string
          description: "エラー内容"
        message:
          type: string
          description: "エラーのメッセージ"
        path:
          type: string
          description: "指定したパス"
        timestamp:
          type: string
          description: "エラーが発生した時間"
      required:
        - status
        - error
        - message
        - path

